# We use truncated jumps because one of the main problem when simulating jumps is the simulation of small jumps, 
# that make our process has a infinite activity. We then generate truncated jumps that allow us to take out the 
# small jumps in our process. 
# First, we need to be able to simulate the truncated jumps (usually, this requires a flexible method like 
# the rejection criterion). An easy choice is the asymmetric stable case: the negative jumps follow a Pareto 
# distribution. Below, we start by creating the generator for the jumps. We consider the positive case and we 
# subtract the mean upfront. 

trunc_stable <- function(n, a, eps){             # eps denotes the truncation threshold
    par <- rpareto(n, location = eps, shape = a) # Raw Pareto
    par_treated <- par / alpha / eps^alpha       # Scaled Pareto
    return((par_treated - eps^(1-alpha)/(alpha-1))/gamma(-alpha)) # Re-scaled with mean removed
}

# Monte-Carlo simulation, double heston with truncated jumps
N_simul <- 1000  ; N_points <- 24       #Simulations and Discretization points
S <- 61.9 ; K <- S*1.3 ; B<- 70;r <- 0.03 ;t <- 1 ; dt <- t/N_points #Stock-Strike-riskfreerate-maturity-discretized time
  #Time to maturity and discretized time
Rho1 <- -0.5 ; Rho2 <-  -0.5  #Correlation coef. of the BM
Correl_vol1 <- rbind(c(1,Rho1),c(Rho1,1)) #Correlation matrix of the BM of the first vol
Correl_vol2 <- rbind(c(1,Rho2),c(Rho2,1)) #Correlation matrix of the BM of the second vol
Vol_1 <- 0.6 ; B1 <- 0.9 ; Tta1 <- 0.1 ; volvol1 <- 0.1 #Parameters of the first Stoch. vol.
Vol_2 <- 0.7 ; B2 <- 1.2 ; Tta2 <- 0.15 ; volvol2 <- 0.2 #Parameters of the second Stoch. vol.
x <- c() ; V1 <- c() ; V2 <- c() ; payoff <- c()
alpha <- 1.5 ; eps <- 0.01 ; lambda <- eps^(-alpha)/alpha/gamma(-alpha)  # Jump intensity!  
j <- rexp(1, lambda)    # First jump time
while(t/N_points > j){         # Jump occurred in the interval before the FIRST point
    x <- x - trunc_stable(1, alpha, eps) / lambda
    j <- j + rexp(1, lambda)          # Next jumping time
}
for(i in 1:N_simul){ #Initialize the value of S, Vol_1 and Vol_2
    if(i%%(N_simul/10) == 0){print(paste( i,'Simulations'))}
    x[1] <- S ; 
    V1[1] <- Vol_1 ; 
    V2[1] <- Vol_2 #Initialize the price and both volatility vectors
    for(j in 2:N_points){
        Gauss1 <- mvrnorm(1,mu=c(0,0),Sigma = Correl_vol1)
        Gauss2 <- mvrnorm(1,mu=c(0,0),Sigma = Correl_vol2)
        V1[j] <- V1[j-1] + B1*(Tta1 -V1[j-1])*dt + volvol1*sqrt(V1[j-1])*Gauss1[1]*sqrt(dt)
        V2[j] <- V2[j-1] + B2*(Tta2 -V2[j-1])*dt + volvol2*sqrt(V2[j-1])*Gauss2[1]*sqrt(dt)
        x[j] <- x[j-1] * (1+ r*dt + sqrt(V1[j])*Gauss1[2]*sqrt(dt) + sqrt(V2[j])*Gauss2[2]*sqrt(dt))
        while(t*i/N_points > j & t*(i-1)/N_points < j){     # Jump occurred in the interval before the point
          x[i] <- x[i] - trunc_stable(1, alpha, eps) / lambda # Negative jump!
          j <- j + rexp(1, lambda)          # Next jumping time
        }
    }
    payoff[i] <- max(x[N_points]-K,0) 
    if(x[N_points] > B){payoff[i] <- 0}
    else payoff[i] <- max(x[N_points]-K,0)
}

UOC <- exp(-r*t)*mean(payoff)
print(call

# Visualization of the jumps 
Date <- (1:N_points) / N_points * t;Simul <- data.frame(Date, x, "Stock");
Simul_vol1 <- data.frame(Date, V1, "Vol1");
Simul_vol2 <- data.frame(Date, V2, "Vol2");
colnames(Simul) <- c("Date", "Value", "Type");
colnames(Simul_vol1) <- c("Date", "Value", "Type");
colnames(Simul_vol2) <- c("Date", "Value", "Type");
Visu <- rbind(Simul, 
Simul_vol1,Simul_vol2);
ggplot(Visu, aes(x = Date, y = Value)) + geom_line() + facet_grid(Type ~., scales = "free") + geom_vline(xintercept = j_t[1:(length(j_t)-1)], color = "red")
